name: Update live data (prices, RSI, SST)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "scripts/**"
      - "sst_inputs.json"
      - "data_live.json"
      - ".github/workflows/update_live.yml"
  schedule:
    - cron: "*/5 13-21 * * 1-5"

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TICKERS: "SCHD,VTI,VXUS,XLV,VNQ,BND,GEMI"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure base files exist
        shell: bash
        run: |
          if [ ! -f data_live.json ]; then
            cat > data_live.json << 'JSON'
{
  "Prices": {},
  "RSI": {},
  "SST": {},
  "SST_TOP5": [],
  "last_update_utc": ""
}
JSON
          fi
          if [ ! -f sst_inputs.json ]; then
            cat > sst_inputs.json << 'JSON'
{
  "PLUG": { "si_shares": 100000000, "float_shares": 600000000, "avg_vol_30d": 25000000, "entry": 3.10, "stop": 2.72, "t1": 3.45, "t2": 3.90 },
  "RIOT": { "si_shares": 36000000,  "float_shares": 260000000, "avg_vol_30d": 21000000, "entry": 8.60, "stop": 7.80, "t1": 9.40, "t2": 10.20 },
  "AFRM": { "si_shares": 21000000,  "float_shares": 250000000, "avg_vol_30d": 12000000, "entry": 28.50, "stop": 26.90, "t1": 30.80, "t2": 33.00 },
  "NVTS": { "si_shares": 9500000,   "float_shares": 110000000, "avg_vol_30d": 2400000,  "entry": 5.10, "stop": 4.70, "t1": 5.70, "t2": 6.30 },
  "SOFI": { "si_shares": 120000000, "float_shares": 930000000, "avg_vol_30d": 46000000, "entry": 7.50, "stop": 6.90, "t1": 8.20, "t2": 8.90 }
}
JSON
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --no-cache-dir yfinance==0.2.43 pandas==2.2.2 numpy==1.26.4

      - name: Write updater script
        shell: bash
        run: |
          mkdir -p scripts
          cat > scripts/update_live.py << 'PY'
import json, os, time
from datetime import datetime, timezone
import numpy as np
import pandas as pd
import yfinance as yf

LIVE_PATH = "data_live.json"
SST_PATH  = "sst_inputs.json"

def rsi_wilder(series, period=14):
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.ewm(alpha=1/period, adjust=False).mean()
    avg_loss = loss.ewm(alpha=1/period, adjust=False).mean()
    rs = avg_gain / (avg_loss.replace(0, 1e-12))
    rsi = 100 - (100 / (1 + rs))
    return float(round(rsi.iloc[-1], 2))

def safe_load_json(path, default):
    try:
        with open(path, "r") as f:
            return json.load(f)
    except Exception:
        return default

def safe_write_json(path, obj):
    with open(path, "w") as f:
        json.dump(obj, f, indent=2, ensure_ascii=False)

def fetch_last_price(ticker):
    try:
        df = yf.download(ticker, period="1d", interval="1m", progress=False, auto_adjust=False)
        if df is not None and not df.empty:
            return float(round(df["Close"].iloc[-1], 2))
    except Exception:
        pass
    try:
        df = yf.download(ticker, period="5d", interval="1d", progress=False, auto_adjust=False)
        if df is not None and not df.empty:
            return float(round(df["Close"].iloc[-1], 2))
    except Exception:
        pass
    return None

def fetch_rsi14(ticker):
    try:
        df = yf.download(ticker, period="6mo", interval="1d", progress=False, auto_adjust=False)
        if df
