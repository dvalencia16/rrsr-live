name: Update live data (robust)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "scripts/**"
      - "sst_inputs.json"
      - "data_live.json"
      - ".github/workflows/update_live.yml"
  schedule:
    - cron: "*/5 13-21 * * 1-5"

jobs:
  run:
    runs-on: ubuntu-latest
    permissions: { contents: write }
    env:
      TICKERS: "SCHD,VTI,VXUS,XLV,VNQ,BND,GEMI"
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir yfinance==0.2.43 pandas==2.2.2 numpy==1.26.4

      - name: Write updater
        shell: bash
        run: |
          mkdir -p scripts
          cat > scripts/update_live.py <<'PY'
import json, os, time, sys
from datetime import datetime, timezone
import numpy as np, pandas as pd, yfinance as yf

LIVE_PATH = "data_live.json"; SST_PATH = "sst_inputs.json"

def load(path, default): 
    try: 
        with open(path,"r") as f: return json.load(f)
    except: 
        return default

def dump(path, obj):
    with open(path,"w") as f: json.dump(obj, f, indent=2, ensure_ascii=False)

def rsi_wilder(series, period=14):
    delta = series.diff(); gain = delta.clip(lower=0); loss = -delta.clip(upper=0)
    ag = gain.ewm(alpha=1/period, adjust=False).mean()
    al = loss.ewm(alpha=1/period, adjust=False).mean()
    rs = ag / (al.replace(0, 1e-12)); return float(round(100 - 100/(1+rs.iloc[-1]), 2))

def last_price_fast(t):
    try:
        fi = yf.Ticker(t).fast_info
        v = fi.get("last_price") or fi.get("lastPrice") or fi.get("regular_market_price")
        if v: return float(round(float(v),2))
    except Exception: pass
    return None

def last_price_daily(t):
    try:
        d = yf.download(t, period="5d", interval="1d", progress=False, auto_adjust=False)
        if d is not None and not d.empty:
            return float(round(d["Close"].dropna().iloc[-1],2))
    except Exception: pass
    return None

def rsi_daily(t):
    try:
        d = yf.download(t, period="6mo", interval="1d", progress=False, auto_adjust=False)
        if d is None or d.empty or len(d)<20: return None
        return rsi_wilder(d["Close"])
    except Exception: return None

def prices_and_rsi(tickers):
    prices, rsis = {}, {}
    for t in tickers:
        p = last_price_fast(t)
        if p is None: p = last_price_daily(t)
        prices[t] = p if p is not None else "data not available"
        r = rsi_daily(t)
        rsis[t] = r if r is not None else "data not available"
        print(f"[{t}] price={prices[t]} rsi={rsis[t]}", flush=True)
        time.sleep(0.2)
    return prices, rsis

def build_sst(prices, rsis, inputs):
    out = {}
    for tk, v in inputs.items():
        def pct(x,y): 
            try: return round(100*x/y,2)
            except: return None
        def div(x,y):
            try: return round(x/y,2)
            except: return None
        out[tk]={
            "rsi": rsis.get(tk,"data not available"),
            "si_percent_float": pct(v.get("si_shares"), v.get("float_shares")) or "data not available",
            "days_to_cover": div(v.get("si_shares"), v.get("avg_vol_30d")) or "data not available",
            "entry": v.get("entry","data not available"),
            "stop":  v.get("stop","data not available"),
            "t1":    v.get("t1","data not available"),
            "t2":    v.get("t2","data not available"),
            "last":  prices.get(tk,"data not available"),
            "sources": ["sst_inputs.json"]
        }
    return out

def score(item):
    def num(x):
        try: return float(x)
        except: return None
    r, s, d = num(item.get("rsi")), num(item.get("si_percent_float")), num(item.get("days_to_cover"))
    sN = min(max((s or 0),0),40)/40; dN=min(max((d or 0),0),10)/10; rN=0 if r is None else max(0,70-r)/70
    return round((0.5*sN+0.3*dN+0.2*rN)*100,1)

def top5(sst):
    rows=[{"ticker":k,"score":score(v),**{kk:v.get(kk) for kk in ["rsi","si_percent_float","days_to_cover","entry","stop"]},"targets":[v.get("t1"),v.get("t2")],"sources":v.get("sources",[])} for k,v in sst.items()]
    rows.sort(key=lambda x:x["score"], reverse=True); return rows[:5]

def market_bullets():
    out={}; bullets=[]
    for tk,lab in [("SPY","SPY"),("QQQ","QQQ"),("^VIX","VIX")]:
        try:
            d=yf.download(tk,period="1d",interval="1m",progress=False,auto_adjust=False)
            if d is not None and not d.empty:
                last=float(round(d["Close"].dropna().iloc[-1],2)); base=float(d["Close"].dropna().iloc[0])
                pct=round(100*(last/base-1),2) if base else None
                out[tk]={"last":last,"pct_change":pct}
                if pct is not None: bullets.append(f"{lab} {pct}% today")
            else:
                out[tk]={"last":"data not available","pct_change":"data not available"}
        except Exception:
            out[tk]={"last":"data not available","pct_change":"data not available"}
    # Fannie/Freddie
    for tk in ["FNMA","FMCC"]:
        p=last_price_fast(tk) or last_price_daily(tk)
        out[tk]={"last": p if p is not None else "data not available"}
    return {"ticks":out,"bullets":bullets,"sources":["yfinance"]}

def ensure_files():
    if not os.path.exists(LIVE_PATH):
        dump(LIVE_PATH, {"Prices": {}, "RSI": {}, "SST": {}, "SST_TOP5": [], "Market": {}, "last_update_utc": ""})
    if not os.path.exists(SST_PATH):
        dump(SST_PATH, {
          "PLUG":{"si_shares":100000000,"float_shares":600000000,"avg_vol_30d":25000000,"entry":3.10,"stop":2.72,"t1":3.45,"t2":3.90},
          "RIOT":{"si_shares":36000000,"float_shares":260000000,"avg_vol_30d":21000000,"entry":8.60,"stop":7.80,"t1":9.40,"t2":10.20}
        })

def main():
    ensure_files()
    tickers=[t.strip().upper() for t in os.getenv("TICKERS","").split(",") if t.strip()]
    data=load(LIVE_PATH, {"Prices": {}, "RSI": {}, "SST": {}, "SST_TOP5": [], "Market": {}, "last_update_utc": ""})
    prices, rsis = prices_and_rsi(tickers)
    data["Prices"]=prices; data["RSI"]=rsis
    sstin=load(SST_PATH,{})
    sst=build_sst(prices, rsis, sstin)
    data["SST"]=sst; data["SST_TOP5"]=top5(sst)
    data["Market"]=market_bullets()
    data["last_update_utc"]=datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
    dump(LIVE_PATH,data)

if __name__=="__main__": main()
PY

      - name: Run updater
        run: python scripts/update_live.py

      - name: Commit, rebase, push
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "auto: robust prices+RSI via fast_info fallback" || echo "No changes"
          git pull --rebase --autostash origin main
          git push origin HEAD:main
