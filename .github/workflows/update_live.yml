name: Update live data (prices + RSI + Market + SST)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/update_live.yml"
      - "sst_inputs.json"
  schedule:
    - cron: "*/10 13-21 * * 1-5"

jobs:
  run:
    runs-on: ubuntu-latest
    permissions: { contents: write }
    env:
      TICKERS: "SCHD,VTI,VXUS,XLV,VNQ,BND,GEMI"
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install yfinance==0.2.43 pandas==2.2.2 numpy==1.26.4

      - name: Update data_live.json
        run: |
          python - <<'PY'
          import json, os, time
          from datetime import datetime, timezone
          import numpy as np, pandas as pd, yfinance as yf

          LIVE_PATH = "data_live.json"
          SST_PATH  = "sst_inputs.json"

          def jload(p, d): 
              try:
                  with open(p) as f: return json.load(f)
              except: return d
          def jdump(p, o):
              with open(p,"w") as f: json.dump(o,f,indent=2,ensure_ascii=False)

          def rsi14(close):
              d=close.diff()
              up=d.clip(lower=0); dn=-d.clip(upper=0)
              ag=up.ewm(alpha=1/14,adjust=False).mean()
              al=dn.ewm(alpha=1/14,adjust=False).mean().replace(0,1e-12)
              rs=ag/al
              return float(np.round(100-100/(1+rs.iloc[-1]),2))

          def last_price_intraday(t):
              for (per,iv) in [("1d","1m"),("5d","1d")]:
                  try:
                      df=yf.Ticker(t).history(period=per,interval=iv,auto_adjust=False)
                      if not df.empty: return float(np.round(df["Close"].dropna().iloc[-1],2))
                  except: pass
              return None

          def price_and_rsi(t):
              last=last_price_intraday(t)
              r=None
              try:
                  df=yf.Ticker(t).history(period="6mo",interval="1d",auto_adjust=False)
                  if len(df)>=20: r=rsi14(df["Close"])
              except: pass
              return last, (r if r is not None else "data not available")

          def market_bullets():
              out={}; bullets=[]
              for tk,lab in [("SPY","SPY"),("QQQ","QQQ"),("^VIX","VIX")]:
                  try:
                      df=yf.Ticker(tk).history(period="1d",interval="1m",auto_adjust=False)
                      if not df.empty:
                          c=df["Close"].dropna()
                          last=float(np.round(c.iloc[-1],2))
                          pct=float(np.round((c.iloc[-1]/c.iloc[0]-1)*100,2))
                          out[tk]={"last":last,"pct_change":pct}; bullets.append(f"{lab} {pct}% today")
                      else:
                          out[tk]={"last":"data not available","pct_change":"data not available"}
                  except:
                      out[tk]={"last":"data not available","pct_change":"data not available"}
              return {"ticks":out,"bullets":bullets,"sources":["yfinance"]}

          def build_sst(prices, rsimap, sstin):
              def pct(x,y):
                  try: return round(100*x/y,2)
                  except: return None
              def div(x,y):
                  try: return round(x/y,2)
                  except: return None
              out={}
              for tk,v in sstin.items():
                  out[tk]={
                      "rsi": rsimap.get(tk,"data not available"),
                      "si_percent_float": pct(v.get("si_shares"),v.get("float_shares")) or "data not available",
                      "days_to_cover": div(v.get("si_shares"),v.get("avg_vol_30d")) or "data not available",
                      "entry": v.get("entry","data not available"),
                      "stop":  v.get("stop","data not available"),
                      "t1":    v.get("t1","data not available"),
                      "t2":    v.get("t2","data not available"),
                      "last":  prices.get(tk,"data not available"),
                      "sources": ["sst_inputs.json"]
                  }
              # rank
              def num(x):
                  try: return float(x)
                  except: return None
              rows=[]
              for tk,v in out.items():
                  r=num(v["rsi"]); si=num(v["si_percent_float"]); dtc=num(v["days_to_cover"])
                  s=(0.5*(si or 0)/40)+(0.3*(dtc or 0)/10)+(0.2*max(0,70-(r or 70))/70)
                  rows.append((s,tk))
              rows.sort(reverse=True)
              return out,[{"ticker":tk,**out[tk]} for _,tk in rows[:5]]

          # init files
          data=jload(LIVE_PATH,{"Prices":{}, "RSI":{}, "SST":{}, "SST_TOP5":[], "Market":{}, "last_update_utc":""})
          sstin=jload(SST_PATH,{
              "PLUG":{"si_shares":100_000_000,"float_shares":600_000_000,"avg_vol_30d":25_000_000,"entry":3.10,"stop":2.72,"t1":3.45,"t2":3.90},
              "RIOT":{"si_shares":36_000_000,"float_shares":260_000_000,"avg_vol_30d":21_000_000,"entry":8.60,"stop":7.80,"t1":9.40,"t2":10.20},
              "SOFI":{"si_shares":120_000_000,"float_shares":930_000_000,"avg_vol_30d":46_000_000,"entry":7.50,"stop":6.90,"t1":8.20,"t2":8.90},
              "NVTS":{"si_shares":95_000_000,"float_shares":110_000_000,"avg_vol_30d":24_000_000,"entry":5.10,"stop":4.70,"t1":5.70,"t2":6.30},
              "AFRM":{"si_shares":71_000_000,"float_shares":250_000_000,"avg_vol_30d":12_000_000,"entry":28.50,"stop":26.90,"t1":30.80,"t2":33.00}
          })

          tickers=[t.strip().upper() for t in os.getenv("TICKERS","").split(",") if t.strip()]
          prices={}; rsimap={}
          for t in tickers:
              last,rsi=price_and_rsi(t)
              prices[t]=last if last is not None else "data not available"
              rsimap[t]=rsi
              time.sleep(0.2)

          data["Prices"]=prices
          data["RSI"]=rsimap
          sst, top5 = build_sst(prices, rsimap, sstin)
          data["SST"]=sst
          data["SST_TOP5"]=top5
          data["Market"]=market_bullets()
          data["last_update_utc"]=datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
          jdump(LIVE_PATH,data)
          PY

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "auto: fill Prices, RSI, Market, SST" || echo "No changes"
          git pull --rebase --autostash origin main
          git push origin HEAD:main
