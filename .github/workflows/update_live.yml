name: Update live data (prices, RSI, SST, Market, FNF, Calendar)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - "scripts/**"
      - "sst_inputs.json"
      - "data_live.json"
      - ".github/workflows/update_live.yml"
  schedule:
    - cron: "*/5 13-21 * * 1-5"

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TICKERS: "SCHD,VTI,VXUS,XLV,VNQ,BND,GEMI"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --no-cache-dir yfinance==0.2.43 pandas==2.2.2 numpy==1.26.4 python-dateutil==2.9.0.post0

      - name: Write updater script
        shell: bash
        run: |
          mkdir -p scripts
          cat > scripts/update_live.py << 'PY'
import json, os, time
from datetime import datetime, timezone, date, timedelta
from dateutil.relativedelta import relativedelta
import numpy as np
import pandas as pd
import yfinance as yf

LIVE_PATH = "data_live.json"
SST_PATH  = "sst_inputs.json"

# ---------------- helpers ----------------
def rsi_wilder(series, period=14):
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.ewm(alpha=1/period, adjust=False).mean()
    avg_loss = loss.ewm(alpha=1/period, adjust=False).mean()
    rs = avg_gain / (avg_loss.replace(0, 1e-12))
    rsi = 100 - (100 / (1 + rs))
    return float(round(rsi.iloc[-1], 2))

def safe_load_json(path, default):
    try:
        with open(path, "r") as f:
            return json.load(f)
    except Exception:
        return default

def safe_write_json(path, obj):
    with open(path, "w") as f:
        json.dump(obj, f, indent=2, ensure_ascii=False)

def dl(ticker, period, interval):
    return yf.download(ticker, period=period, interval=interval, progress=False, auto_adjust=False)

def last_price_and_change(ticker):
    last = None; pct = None
    try:
        d1 = dl(ticker, "1d", "1m")
        if d1 is not None and not d1.empty:
            last = float(round(d1["Close"].iloc[-1], 2))
            prev = float(d1["Close"].iloc[0])
            if prev:
                pct = round(100*(last/prev - 1), 2)
    except Exception:
        pass
    if last is None or pct is None:
        try:
            d5 = dl(ticker, "5d", "1d")
            if d5 is not None and not d5.empty:
                last = float(round(d5["Close"].iloc[-1], 2))
                prev = float(d5["Close"].iloc[-2]) if len(d5)>=2 else float(d5["Close"].iloc[0])
                if prev:
                    pct = round(100*(last/prev - 1), 2)
        except Exception:
            pass
    return last, pct

def fetch_last_price(ticker):
    p,_ = last_price_and_change(ticker)
    return p

def fetch_rsi14(ticker):
    try:
        df = dl(ticker, "6mo", "1d")
        if df is None or df.empty or len(df) < 20:
            return None
        return rsi_wilder(df["Close"], period=14)
    except Exception:
        return None

# ---------------- Short Squeeze ----------------
def build_sst(prices, rsi_map, sst_inputs):
    out = {}
    for tk, vals in sst_inputs.items():
        si_sh = vals.get("si_shares")
        flt   = vals.get("float_shares")
        avgv  = vals.get("avg_vol_30d")
        entry = vals.get("entry")
        stop  = vals.get("stop")
        t1    = vals.get("t1")
        t2    = vals.get("t2")
        def pct(x,y):
            try: return round(100*x/y,2) if x is not None and y else None
            except: return None
        def div(x,y):
            try: return round(x/y,2) if x is not None and y else None
            except: return None
        out[tk] = {
            "rsi": rsi_map.get(tk, "data not available") if rsi_map.get(tk) is not None else "data not available",
            "si_percent_float": pct(si_sh, fl_
